WITH traders AS (    
    WITH averagedtrades AS (
            WITH trades AS 
                (WITH token AS
                  (SELECT call_tx_hash,
                      CASE
                          WHEN am.contract_address = '\x0000000000000000000000000000000000000000' THEN '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'
                          ELSE am.contract_address
                      END AS token_address,

                  CONCAT(nft.contract_address::text, nft."tokenId") as tokenId,
                 "rightOrder"::json->'makerAddress' as seller,
                  "leftOrder"::json->'makerAddress' as buyer
                   FROM opensea_polygon_v2."ZeroExFeeWrapper_call_matchOrders" am
                   LEFT JOIN erc721."ERC721_evt_Transfer" nft ON nft.evt_tx_hash = call_tx_hash
                   WHERE am.contract_address <> '\x16f8cf10b772d1e520fcc3fe192eff0f68098873' 
                        AND nft."tokenId" is not NULL
                       )
                SELECT buyer, seller, am.call_tx_hash,
                    tokenId, 
                    evt_block_time as transaction_time,
                    am."rightOrder"::json->'takerFeePaid' as paid,
                    ( paid/ 10^erc.decimals) as price, ((om.price / 10^erc.decimals) * p.price) AS price_usd,
                    am."rightOrder"::json->'makerAddress' as maker,
                    am."leftOrder"::json->'makerAddress' as taker

                FROM opensea_polygon_v1."ZeroXExchangeContract_evt_TransactionExecution" om
                    INNER JOIN opensea_polygon_v2."ZeroExFeeWrapper_call_matchOrders" am on am.call_tx_hash = om.evt_tx_hash
                    INNER JOIN token ON token.call_tx_hash = om.evt_tx_hash
                    INNER JOIN erc20.tokens erc ON token.token_address = erc.contract_address
                    INNER JOIN prices.usd p ON p.minute = date_trunc('minute', evt_block_time)
                    AND token.token_address = p.contract_address
                    WHERE ((am."leftOrder"::json->'makerAssetAmount' / 10^erc.decimals) * p.price) < 250000 /* trades with price > 250k usd does not count */),
                        
                    averageprices AS (
                            SELECT call_tx_hash as trade_tx, 
                                avg(price_usd)/count(price_usd) as average_price
                            from trades
                            group by trade_tx
                            having count(price_usd) > 1)
                            
                    SELECT buyer, seller, call_tx_hash,
                        tokenId, transaction_time, 
                        CASE
                            WHEN ap.average_price > 0 THEN ap.average_price
                            ELSE st.price_usd
                        END AS averaged_price
                        from trades st
                        LEFT JOIN averageprices ap ON st.call_tx_hash = ap.trade_tx
                    ),
            
            buys AS (
                select 
                buyer,
                transaction_time,
                tokenId, 
                averaged_price as buys_usd
                from 
                averagedtrades 
            )    
            select 
                CONCAT('https://opensea.io/0', substring(bs.buyer::text from 2)) as wallet,
                min(bs.transaction_time) as active_from,
                max(bs.transaction_time) as last_buy_at,
                count(*) as buys,
                sum(buys_usd) as buys_total_usd,
                count(averaged_price) as resells,
                sum(buys_usd) filter (where averaged_price is not null) as buys_total_of_sold_usd,
                sum(averaged_price) as sells_total_usd,
                (sum(averaged_price) - (sum(buys_usd) filter (where averaged_price is not null))) as profit_usd

            from buys bs
                left join averagedtrades st ON bs.buyer = st.seller and st.tokenId = bs.tokenId
            group by wallet
                HAVING sum(buys_usd) > 0 and (sum(averaged_price) - sum(buys_usd)) > 0 /* With profits only */
                and count(st.*) > 40 and sum(averaged_price) > 30000 /* with >40 trades and >30k$ total sales */
            order by profit_usd desc)
            
        select ROW_NUMBER() OVER() AS no, 
            wallet, 
            buys, 
            buys_total_usd, 
            resells,
            buys_total_of_sold_usd,
            sells_total_usd, 
            profit_usd, 
            profit_usd / (buys_total_of_sold_usd) as roi,
            (buys_total_usd - buys_total_of_sold_usd) as unsold_total_usd,
            active_from, last_buy_at
            from traders LIMIT 10





